Nota importante: los endpoints con parametros siempre deven ir primero
para que nno aya ningun error de chocque o se clone el endpoint


Nota: si estamos trabajando dentro de un controlador no es necesario la ruta principal
solo basta con el especifico 
ejemplo
    Antes:
        @Get('products/filter')
    Ahora 
        @Get('filter');



Decoradores üÖ∞Ô∏è
nos ayuda a decorar las peticiones 
repsonse podriamos sacar un token

Ingectable()
inyeccion de depencencias 
estas se dirijen a los controladores 

 
.- Codigo estilo express
    response.status(200).send({
      mensaje: `Product ${params.productId}`,
    });
    
.- Codigo estilo nest
    return {
      mensaje: `Product ${params.productId}`,
    } 


Truco: Agregar + a un string  para forzar a que sea un entero
ejemplo:
+productId


@Query('limit') limit = 100,
@Query('offset') offset = 3,
@Query('brand') brand: string,

PIPES:  Tiene el objetivo de validar y transformar informacion 
una de sus funcionalidades es:

la salida de un pipe puede ser la entrada de otro

-. Data Transfer Object=
son objetos que nos permiten validar i tipar, cuando se envia informacion
esta nos sirve para actualizar etc

.- Validando par√°metros con class-validator y mapped-types
Esta es una validacion de tipos desde la ejecuci√≥n

npm install @nestjs/mapped-types class-validator class-transformer

